	"Lime Light Subsystem":{
		"prefix": "Lime Light Subsystem",
		"description": "",
		"body": [
			"\tpublic enum LedMode {",
				"\t\tkon(0), koff(1), kblink(2);",
				"\t",
				"\t\t@SuppressWarnings(\"MemberName\")",
				"\t\tpublic final int value;",
				"\t",
				"\t\tLedMode(int value) {",
				"\t\t this.value = value;",
				"\t\t}",
				"\t}",
				"",
				"\tpublic enum CamMode {",
				"\t\tkvision(0), kdriver(1);",
				"\t",
				"\t\t@SuppressWarnings(\"MemberName\")",
				"\t\tpublic final int value;",
				"\t",
				"\t\tCamMode(int value) {",
				"\t\t this.value = value;",
				"\t\t}",
				"\t}",
				"",
				"\tpublic enum Stream {",
				"\t\tkStandard(0),",
				"\t\tkPiPMain(1),",
				"\t\tkPiPSecondary(2);",
				"\t",
				"\t\t@SuppressWarnings(\"MemberName\")",
				"\t\tpublic final int value;",
				"\t",
				"\t\tStream(int value) {",
				"\t\t\tthis.value = value;",
				"\t\t}",
				"\t}",
				"",
				"\t",
				"// Put methods for controlling this subsystem",
				"// here. Call these from Commands.",
				"",
				"\tprivate NetworkTable table = Robot.limeLighttable;",
				"\t//public void Vision_HardwareInit() {",
				"\t//  limeLighttable = NetworkTableInstance.getDefault().getTable(\"limelight\");",
				"\t//}",
				"",
				"public void initDefaultCommand() {",
				"// Set the default command for a subsystem here.",
				"//setDefaultCommand(new MySpecialCommand());",
				"}",
				"\t/**",
				"\t * tv   Whether the limelight has any valid targets (0 or 1)",
				"\t * @return",
				"\t */",
				"\tpublic boolean my_IsTargetFound() {",
				"\t\tNetworkTableEntry tv = table.getEntry(\"tv\");",
				"\tdouble v = tv.getDouble(0);",
				"\tif (v == 0.0f){",
				"\t\treturn false;",
				"\t}else {",
				"\t\treturn true;",
				"\t}",
				"\t}",
				"\t/**",
				"\t * tx Horizontal Offset From Crosshair To Target (-27 degrees to 27 degrees)",
				"\t * @return",
				"\t */",
				"public double my_degRotationToTarget() {",
				"\t\tNetworkTableEntry tx = Robot.limeLighttable.getEntry(\"tx\");",
				"\tdouble x = tx.getDouble(0.0);",
				"\treturn x;",
				"\t}",
				"\t/**",
				"\t * ty Vertical Offset From Crosshair To Target (-20.5 degrees to 20.5 degrees)",
				"\t * @return ",
				"\t */",
				"\tpublic double my_degVerticalToTarget() {",
				"\t\tNetworkTableEntry ty = Robot.limeLighttable.getEntry(\"ty\");",
				"\tdouble y = ty.getDouble(0.0);",
				"\treturn y;",
				"}",
				"\t/**",
				"\t * ta Target Area (0% of image to 100% of image)",
				"\t * @return",
				"\t */",
				"\tpublic double my_TargetArea() {",
				"\t\tNetworkTableEntry ta = Robot.limeLighttable.getEntry(\"ta\");",
				"\tdouble a = ta.getDouble(0.0);",
				"\treturn a;",
				"}",
				"\t/**",
				"\t * ts Skew or rotation (-90 degrees to 0 degrees)",
				"\t * @return",
				"\t */",
				"\tpublic double my_Skew_Rotation() {",
				"\t\tNetworkTableEntry ts = Robot.limeLighttable.getEntry(\"ts\");",
				"\tdouble s = ts.getDouble(0.0);",
				"\treturn s;",
				"\t}",
				"\t/**",
				"\t * tl The pipeline’s latency contribution (ms) Add at least 11ms for image capture latency.",
				"\t * @return",
				"\t */",
				"\tpublic double my_PipelineLatency() {",
				"\t\tNetworkTableEntry tl = Robot.limeLighttable.getEntry(\"tl\");",
				"\tdouble l = tl.getDouble(0.0);",
				"\treturn l;",
				"}",
				"",
				"\t//Setters",
				"\t",
				"\t/**",
				"\t * LedMode  Sets limelight’s LED state",
				"\t * ",
				"\t * 0 on",
				"\t * 1 off",
				"\t * 2 blink",
				"\t * @param ledMode",
				"\t */",
				"\tpublic void setLEDMode(double ledMode){",
				"\t\ttable.getEntry(\"ledMode\").setValue(ledMode);",
				"\t}",
				"\t/**",
				"\t * camMode  Sets limelight’s operation mode",
				"\t * ",
				"\t * 0\tVision processor",
				"\t * 1\tDriver Camera (Increases exposure, disables vision processing)",
				"\t * @param camMode",
				"\t */",
				"\tpublic void setCamMode(double camMode) {",
				"\t\ttable.getEntry(\"camMode\").setValue(camMode);",
				"\t}",
				"\t/**",
				"\t * pipeline Sets limelight’s current pipeline",
				"\t * ",
				"\t * 0 .. 9   Select pipeline 0..9",
				"\t * ",
				"\t * @param pipeline",
				"\t */",
				"\tpublic void setPipeline(Double pipeline) {",
				"\t\ttable.getEntry(\"pipeline\").setValue(pipeline);",
				"\t}",
				"",
				"\t/**",
				"\t * stream   Sets limelight’s streaming mode",
				"\t * ",
				"\t * 0\tStandard - Side-by-side streams if a webcam is attached to Limelight",
				"\t * 1\tPiP Main - The secondary camera stream is placed in the lower-right corner of the primary camera stream",
				"\t * 2\tPiP Secondary - The primary camera stream is placed in the lower-right corner of the secondary camera stream",
				"\t * ",
				"\t * @param stream",
				"\t */ ",
				"\tpublic void setStream(Double stream) {",
				"\t\ttable.getEntry(\"stream\").setValue(stream);",
				"\t}",
				"",
				"\t/**",
				"\t * snapshot Allows users to take snapshots during a match",
				"\t * ",
				"\t * 0\tStop taking snapshots",
				"\t * 1\tTake two snapshots per second",
				"\t * @param snapshot",
				"\t */",
				"\tpublic void setSnapshot(Double snapshot) {",
				"\t\ttable.getEntry(\"snapshot\").setValue(snapshot);",
				"\t}",
				"",
				"\t// *************** Advanced Usage with Raw Contours *********************   ",
				"",
				"\t/**",
				"\t * Limelight posts three raw contours to NetworkTables that are not influenced by your grouping mode. ",
				"\t * That is, they are filtered with your pipeline parameters, but never grouped. X and Y are returned ",
				"\t * in normalized screen space (-1 to 1) rather than degrees.\t * ",
				"\t */",
				"",
				"\tpublic double Advanced_RotationToTarget(int raw) {",
				"\t\tNetworkTableEntry txRaw = Robot.limeLighttable.getEntry(\"tx\" + Integer.toString(raw));",
				"\tdouble x = txRaw.getDouble(0.0);",
				"\treturn x;",
				"\t}",
				"",
				"\tpublic double Advanced_degVerticalToTarget(int raw) {",
				"\t\tNetworkTableEntry tyRaw = Robot.limeLighttable.getEntry(\"ty\" + Integer.toString(raw));",
				"\tdouble y = tyRaw.getDouble(0.0);",
				"\treturn y;",
				"\t}",
				"",
				"\tpublic double Advanced_TargetArea(int raw) {",
				"\t\tNetworkTableEntry taRaw = Robot.limeLighttable.getEntry(\"ta\" + Integer.toString(raw));",
				"\tdouble a = taRaw.getDouble(0.0);",
				"\treturn a;",
				"}",
				"\t",
				"\tpublic double Advanced_Skew_Rotation(int raw) {",
				"\t\tNetworkTableEntry tsRaw = Robot.limeLighttable.getEntry(\"ts\" + Integer.toString(raw));",
				"\tdouble s = tsRaw.getDouble(0.0);",
				"\treturn s;",
				"\t}",
				"",
				"\t//Raw Crosshairs:",
				"\t//If you are using raw targeting data, you can still utilize your calibrated crosshairs:",
				"\t",
				"\tpublic double[] Advanced_RawCrosshair(int raw){",
				"\t\tdouble[] crosshars = new double[2];",
				"\t\tcrosshars[0] = Advanced_RawCrosshair_X(raw);",
				"\t\tcrosshars[1] = Advanced_RawCrosshair_Y(raw);",
				"\t\treturn crosshars;",
				"\t\t",
				"\t}",
				"\tpublic double Advanced_RawCrosshair_X(int raw) {",
				"\t\tNetworkTableEntry cxRaw = Robot.limeLighttable.getEntry(\"cx\" + Integer.toString(raw));",
				"\tdouble x = cxRaw.getDouble(0.0);",
				"\treturn x;",
				"\t}",
				"",
				"\tpublic double Advanced_RawCrosshair_Y(int raw) {",
				"\t\tNetworkTableEntry cyRaw = Robot.limeLighttable.getEntry(\"cy\" + Integer.toString(raw));",
				"\tdouble y = cyRaw.getDouble(0.0);",
				"\treturn y;",
				"\t}",
				"",
				
		]
	},